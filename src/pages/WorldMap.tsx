import { useEffect, useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Loader2, MapPin, X, Info, ChevronLeft, ChevronRight } from "lucide-react";
import { LocationInfo } from "@/components/LocationInfo";

// –¢–∏–ø—ã –¥–ª—è –º–µ—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
interface Location {
  id: string;
  name: string;
  type: "city" | "country" | "river" | "landmark";
  coordinates: {
    lat: number;
    lng: number;
  };
  description: string;
  images: string[];
  facts: string[];
  flag?: string; // –¥–ª—è —Å—Ç—Ä–∞–Ω
}

// –§–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏—è—Ö
const sampleLocations: Location[] = [
  {
    id: "moscow",
    name: "–ú–æ—Å–∫–≤–∞",
    type: "city",
    coordinates: { lat: 55.7558, lng: 37.6173 },
    description: "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏, –∫—Ä—É–ø–Ω–µ–π—à–∏–π –ø–æ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥ —Å—Ç—Ä–∞–Ω—ã.",
    images: ["/placeholder.svg", "/placeholder.svg", "/placeholder.svg"],
    facts: ["–û—Å–Ω–æ–≤–∞–Ω–∞ –≤ 1147 –≥–æ–¥—É", "–ù–∞—Å–µ–ª–µ–Ω–∏–µ: –±–æ–ª–µ–µ 12 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —á–µ–ª–æ–≤–µ–∫", "–ö—Ä—É–ø–Ω–µ–π—à–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —É–∑–µ–ª –†–æ—Å—Å–∏–∏"],
    flag: "/placeholder.svg"
  },
  {
    id: "paris",
    name: "–ü–∞—Ä–∏–∂",
    type: "city",
    coordinates: { lat: 48.8566, lng: 2.3522 },
    description: "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏, –æ–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –ï–≤—Ä–æ–ø—ã.",
    images: ["/placeholder.svg", "/placeholder.svg", "/placeholder.svg"],
    facts: ["–ò–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫ '–ì–æ—Ä–æ–¥ —Å–≤–µ—Ç–∞'", "–≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è - —Å–∏–º–≤–æ–ª –≥–æ—Ä–æ–¥–∞", "–û–¥–∏–Ω –∏–∑ –º–∏—Ä–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –º–æ–¥—ã –∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞"],
    flag: "/placeholder.svg"
  },
  {
    id: "amazon",
    name: "–ê–º–∞–∑–æ–Ω–∫–∞",
    type: "river",
    coordinates: { lat: -3.4653, lng: -58.3800 },
    description: "–ö—Ä—É–ø–Ω–µ–π—à–∞—è —Ä–µ–∫–∞ –≤ –º–∏—Ä–µ –ø–æ –ø–æ–ª–Ω–æ–≤–æ–¥–Ω–æ—Å—Ç–∏.",
    images: ["/placeholder.svg", "/placeholder.svg", "/placeholder.svg"],
    facts: ["–î–ª–∏–Ω–∞ —Ä–µ–∫–∏: –æ–∫–æ–ª–æ 6400 –∫–º", "–ü–ª–æ—â–∞–¥—å –±–∞—Å—Å–µ–π–Ω–∞: –±–æ–ª–µ–µ 7 –º–ª–Ω –∫–º¬≤", "–°–æ–¥–µ—Ä–∂–∏—Ç –æ–∫–æ–ª–æ 20% –≤—Å–µ–π –ø—Ä–µ—Å–Ω–æ–π –≤–æ–¥—ã –ó–µ–º–ª–∏"],
  },
  {
    id: "tokyo",
    name: "–¢–æ–∫–∏–æ",
    type: "city",
    coordinates: { lat: 35.6762, lng: 139.6503 },
    description: "–°—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏, –∫—Ä—É–ø–Ω–µ–π—à–∏–π –º–µ–≥–∞–ø–æ–ª–∏—Å –º–∏—Ä–∞.",
    images: ["/placeholder.svg", "/placeholder.svg", "/placeholder.svg"],
    facts: ["–ù–∞—Å–µ–ª–µ–Ω–∏–µ –∞–≥–ª–æ–º–µ—Ä–∞—Ü–∏–∏: –±–æ–ª–µ–µ 37 –º–∏–ª–ª–∏–æ–Ω–æ–≤ —á–µ–ª–æ–≤–µ–∫", "–û–¥–∏–Ω –∏–∑ –≤–∞–∂–Ω–µ–π—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –º–∏—Ä–∞", "–°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ - –≠–¥–æ"],
    flag: "/placeholder.svg"
  },
  {
    id: "nile",
    name: "–ù–∏–ª",
    type: "river",
    coordinates: { lat: 30.0500, lng: 31.2333 },
    description: "–û–¥–Ω–∞ –∏–∑ –≤–µ–ª–∏—á–∞–π—à–∏—Ö —Ä–µ–∫ –ê—Ñ—Ä–∏–∫–∏ –∏ –º–∏—Ä–∞.",
    images: ["/placeholder.svg", "/placeholder.svg", "/placeholder.svg"],
    facts: ["–î–ª–∏–Ω–∞: –æ–∫–æ–ª–æ 6650 –∫–º", "–Ø–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π —Ä–µ–∫–æ–π –≤ –º–∏—Ä–µ", "–ù–∞ –µ–≥–æ –±–µ—Ä–µ–≥–∞—Ö –∑–∞—Ä–æ–¥–∏–ª–∞—Å—å –¥—Ä–µ–≤–Ω–µ–µ–≥–∏–ø–µ—Ç—Å–∫–∞—è —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è"],
  }
];

const WorldMap = () => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedLocation, setSelectedLocation] = useState<Location | null>(null);
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  
  useEffect(() => {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ä—Ç—ã –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π 3D –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 2000);
    
    return () => clearTimeout(timer);
  }, []);
  
  const handleLocationClick = (location: Location) => {
    setSelectedLocation(location);
    setCurrentImageIndex(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
  };
  
  const handleCloseInfo = () => {
    setSelectedLocation(null);
  };
  
  const nextImage = () => {
    if (selectedLocation) {
      setCurrentImageIndex((prev) => 
        prev < selectedLocation.images.length - 1 ? prev + 1 : 0
      );
    }
  };
  
  const prevImage = () => {
    if (selectedLocation) {
      setCurrentImageIndex((prev) => 
        prev > 0 ? prev - 1 : selectedLocation.images.length - 1
      );
    }
  };
  
  return (
    <div className="relative w-full h-screen bg-gradient-to-b from-blue-900 to-blue-600">
      {isLoading ? (
        <div className="absolute inset-0 flex items-center justify-center bg-background/80 z-50">
          <div className="flex flex-col items-center gap-4">
            <Loader2 className="h-12 w-12 animate-spin text-primary" />
            <p className="text-lg font-medium">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã –º–∏—Ä–∞...</p>
          </div>
        </div>
      ) : (
        <>
          {/* –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ */}
          <div ref={containerRef} className="globe-container w-full h-full flex items-center justify-center">
            <div className="relative w-[600px] h-[600px] rounded-full bg-blue-400 shadow-xl animate-[spin_120s_linear_infinite]">
              {/* –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç—ã (–ø—Ä–æ—Å—Ç–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏) */}
              <div className="absolute top-[20%] left-[30%] w-[30%] h-[40%] bg-green-700 rounded-full opacity-80" />
              <div className="absolute top-[50%] right-[20%] w-[25%] h-[30%] bg-green-700 rounded-full opacity-80" />
              <div className="absolute bottom-[20%] left-[40%] w-[20%] h-[20%] bg-green-700 rounded-full opacity-80" />
              
              {/* –ú–∞—Ä–∫–µ—Ä—ã –ª–æ–∫–∞—Ü–∏–π */}
              {sampleLocations.map((location) => (
                <button
                  key={location.id}
                  className="absolute w-4 h-4 bg-red-500 rounded-full hover:w-6 hover:h-6 hover:bg-red-600 transition-all duration-300 z-10"
                  style={{
                    top: `${Math.random() * 80 + 10}%`,
                    left: `${Math.random() * 80 + 10}%`,
                  }}
                  onClick={() => handleLocationClick(location)}
                  aria-label={`–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ${location.name}`}
                />
              ))}
              
              <div className="absolute bottom-10 left-0 right-0 text-center text-white text-xl">
                –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
              </div>
            </div>
          </div>
          
          {/* –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π */}
          <div className="absolute top-6 right-6 bg-background/90 p-4 rounded-lg border border-border max-w-xs">
            <h3 className="text-lg font-bold mb-3 flex items-center">
              <Info className="h-5 w-5 mr-2" />
              –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
            </h3>
            <ul className="space-y-2 max-h-[50vh] overflow-y-auto">
              {sampleLocations.map((location) => (
                <li key={location.id}>
                  <Button 
                    variant="ghost" 
                    className="w-full justify-start text-left" 
                    onClick={() => handleLocationClick(location)}
                  >
                    <MapPin className="h-4 w-4 mr-2 text-primary" />
                    <span>{location.name}</span>
                    <span className="ml-auto text-xs text-muted-foreground">
                      {location.type === 'city' ? 'üèôÔ∏è' : 
                       location.type === 'country' ? 'üè≥Ô∏è' : 
                       location.type === 'river' ? 'üåä' : 'üèûÔ∏è'}
                    </span>
                  </Button>
                </li>
              ))}
            </ul>
          </div>
        </>
      )}
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ */}
      {selectedLocation && (
        <div className="location-info absolute bottom-0 left-0 right-0 bg-background border-t border-border p-6 max-h-[80vh] overflow-y-auto animate-fade-in">
          <div className="flex justify-between items-start mb-4">
            <div className="flex items-center gap-3">
              <MapPin className="h-6 w-6 text-primary" />
              <h2 className="text-2xl font-bold">{selectedLocation.name}</h2>
              {selectedLocation.flag && (
                <img 
                  src={selectedLocation.flag} 
                  alt={`–§–ª–∞–≥ ${selectedLocation.name}`} 
                  className="h-6 ml-2"
                />
              )}
            </div>
            <Button 
              variant="ghost" 
              size="icon" 
              onClick={handleCloseInfo}
              aria-label="–ó–∞–∫—Ä—ã—Ç—å"
            >
              <X className="h-6 w-6" />
            </Button>
          </div>
          
          {/* –ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
          <div className="relative mb-6 rounded-lg overflow-hidden aspect-video bg-muted">
            <img 
              src={selectedLocation.images[currentImageIndex]} 
              alt={`${selectedLocation.name} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${currentImageIndex + 1}`} 
              className="w-full h-full object-cover"
            />
            
            {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–∞–ª–µ—Ä–µ–µ */}
            <div className="absolute inset-0 flex items-center justify-between">
              <Button 
                variant="ghost" 
                size="icon" 
                onClick={prevImage} 
                className="h-12 w-12 rounded-full bg-background/50 hover:bg-background/70 ml-2"
              >
                <ChevronLeft className="h-8 w-8" />
              </Button>
              <Button 
                variant="ghost" 
                size="icon" 
                onClick={nextImage} 
                className="h-12 w-12 rounded-full bg-background/50 hover:bg-background/70 mr-2"
              >
                <ChevronRight className="h-8 w-8" />
              </Button>
            </div>
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
            <div className="absolute bottom-2 left-0 right-0 flex justify-center gap-1">
              {selectedLocation.images.map((_, index) => (
                <button 
                  key={index} 
                  className={`h-2 w-2 rounded-full ${index === currentImageIndex ? 'bg-primary' : 'bg-background/50'}`}
                  onClick={() => setCurrentImageIndex(index)}
                  aria-label={`–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}`}
                />
              ))}
            </div>
          </div>
          
          <LocationInfo location={selectedLocation} />
        </div>
      )}
    </div>
  );
};

export default WorldMap;
